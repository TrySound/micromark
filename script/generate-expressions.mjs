import fs from 'fs'
import path from 'path'
import regenerate from 'regenerate'
import Connector_Punctuation from '@unicode/unicode-13.0.0/General_Category/Connector_Punctuation/code-points.js'
import Dash_Punctuation from '@unicode/unicode-13.0.0/General_Category/Dash_Punctuation/code-points.js'
import Close_Punctuation from '@unicode/unicode-13.0.0/General_Category/Close_Punctuation/code-points.js'
import Final_Punctuation from '@unicode/unicode-13.0.0/General_Category/Final_Punctuation/code-points.js'
import Initial_Punctuation from '@unicode/unicode-13.0.0/General_Category/Initial_Punctuation/code-points.js'
import Other_Punctuation from '@unicode/unicode-13.0.0/General_Category/Other_Punctuation/code-points.js'
import Open_Punctuation from '@unicode/unicode-13.0.0/General_Category/Open_Punctuation/code-points.js'
import codes from '../lib/character/codes.js'

var pcAll = regenerate()
  .addRange(codes.exclamationMark, codes.slash)
  .addRange(codes.colon, codes.atSign)
  .addRange(codes.leftSquareBracket, codes.graveAccent)
  .addRange(codes.leftCurlyBrace, codes.tilde)
  .add(Connector_Punctuation)
  .add(Dash_Punctuation)
  .add(Close_Punctuation)
  .add(Final_Punctuation)
  .add(Initial_Punctuation)
  .add(Other_Punctuation)
  .add(Open_Punctuation)
  .valueOf()

// Note: we donâ€™t support astrals.
var pc = regenerate()
  .add(
    pcAll.filter(function (d) {
      return d <= 0xffff
    })
  )
  .toRegExp()

fs.writeFileSync(
  path.join('lib', 'constant', 'unicode-punctuation-regex.js'),
  [
    '// This module is generated by `script/`.',
    '//',
    '// CommonMark handles attention (emphasis, strong) markers based on what comes',
    '// before or after them.',
    '// One such difference is if those characters are Unicode punctuation.',
    '// This script is generated from the Unicode data.',
    'module.exports = ' + pc,
    ''
  ].join('\n')
)
